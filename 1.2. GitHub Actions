Here’s a detailed explanation of **Best Practices in GitHub Actions**, along with **interview questions** and **scenario-based examples** to help reinforce your understanding:

---

## ✅ 12. **GitHub Actions – Best Practices**

---

### 🔐 1. **Use `.env` files for config + GitHub Secrets for sensitive data**

* Store **non-sensitive configuration** like `APP_ENV=dev` in `.env` files.
* Use **GitHub Secrets** (under *Settings > Secrets*) for credentials, tokens, API keys.
* Never hardcode passwords or secrets in YAML.

✅ Example:

```yaml
env:
  NODE_ENV: production

- name: Use secret
  run: echo "${{ secrets.API_KEY }}"
```

---

### 🧩 2. **Keep workflows modular**

* Split your workflows based on functionality: `ci.yml`, `deploy.yml`, `lint.yml`, etc.
* Use **reusable workflows** to centralize logic (like testing, packaging, etc.)
* Makes maintenance easier and reusability higher.

✅ Example:

```yaml
uses: ./.github/workflows/test.yml
```

---

### 🧪 3. **Use matrix builds for testing across environments**

* Run the same job for multiple OS, language versions, or frameworks.
* Saves time and improves compatibility coverage.

✅ Example:

```yaml
strategy:
  matrix:
    node: [16, 18]
    os: [ubuntu-latest, windows-latest]

runs-on: ${{ matrix.os }}
```

---

### ⚡ 4. **Use cache wisely to speed up builds**

* Cache dependencies (like `~/.npm`, `~/.m2`, `~/.cache`) to avoid re-installing on every run.
* Use unique keys with `hashFiles()` to ensure accuracy.

✅ Example:

```yaml
- uses: actions/cache@v3
  with:
    path: ~/.npm
    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
```

---

### 🚫 5. **Don’t commit secrets or tokens in YAML files**

* Even accidentally committed secrets can be abused.
* Always use `${{ secrets.<NAME> }}`.
* Rotate credentials if a secret is leaked.

---

## 🎯 **Interview Questions + Answers**

---

### 1. **How do you manage secrets securely in GitHub Actions?**

Use **GitHub Secrets** to store sensitive info like tokens, passwords, and access keys, and reference them via `${{ secrets.SECRET_NAME }}` in workflows.

---

### 2. **What is the advantage of using matrix builds?**

Matrix builds allow parallel testing across multiple OS versions or language versions, improving test coverage and speeding up feedback loops.

---

### 3. **What should you cache in workflows, and how?**

Cache dependencies or build artifacts (e.g., `~/.npm`, Gradle caches). Use `actions/cache@v3` with appropriate keys and paths.

---

### 4. **How do you make GitHub Actions workflows maintainable?**

* Keep them **modular**
* Use **reusable workflows**
* Store configuration externally
* Use descriptive job and step names

---

### 5. **What are the risks of not using secrets properly?**

Exposing secrets in workflows may lead to:

* Credential theft
* Unauthorized access to cloud/services
* Repositories being flagged or blocked by GitHub

---

## 🧩 **Scenario-Based Q\&A**

---

### 🔹 **Scenario 1:**

**Q:** You have a Node.js project and want to test on multiple OS and Node versions. How?

**A:**
Use matrix builds:

```yaml
strategy:
  matrix:
    node: [16, 18]
    os: [ubuntu-latest, windows-latest]
```

---

### 🔹 **Scenario 2:**

**Q:** You observe your builds taking 5 minutes due to dependency installs. How to improve?

**A:**
Use caching:

```yaml
- uses: actions/cache@v3
  with:
    path: ~/.npm
    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
```

---

### 🔹 **Scenario 3:**

**Q:** A developer accidentally pushed a GitHub token to the repo. What should be done?

**A:**

* Revoke and rotate the secret immediately.
* Remove the commit and force push if needed.
* Add `.env` and `.secret` files to `.gitignore` to prevent future leaks.

---

### 🔹 **Scenario 4:**

**Q:** You notice multiple workflows doing the same lint/test tasks. What’s a better approach?

**A:**
Create a **reusable workflow** and call it from all others using:

```yaml
uses: ./.github/workflows/lint-test.yml
```

---

Would you like a checklist PDF for these best practices or a real-world GitHub Actions project example following all of them?
